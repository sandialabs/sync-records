(lambda (run-test make-messenger record-src control-src ledger-src)
  (let* ((pass (lambda (x) (append "pass-" (symbol->string x))))
         (init (lambda (x) `(,x (,record-src
                                 ,(pass x)
                                 ,control-src
                                 (,ledger-src ,(pass x) #t 10))
                                "Installed record interface")))
         (form (lambda (x) `(,(car x)
                             ,(if (eq? (cadr x) '*step*) `(*step* ,(pass (car x)))
                                  `(*local* ,(pass (car x)) ,(cadr x)))
                             ,@(cddr x)))))
    (run-test
     (append
      (map init '(ledger-1 ledger-2 ledger-3 ledger-4 ledger-5))
      (map form
           `((ledger-1 *step*)
             (ledger-1 (ledger-set! (*state* do pin this) yes) #t)
             (ledger-1 (ledger-set! (*state* do pin that) yes) #t)
             (ledger-1 (ledger-set! (*state* do not pin) no) #t)
             (ledger-1 *step*)
             (ledger-1 (ledger-get (*state* do pin) 2) '(directory (this that) #t))
             (ledger-1 (ledger-pin! (*state* do pin this) 2) #t)
             (ledger-1 (ledger-pin! (*state* do pin that) 2) #t)
             (ledger-1 (ledger-get (*state* do pin) 2))
             (ledger-1 (ledger-peer! ledger-2 ,(make-messenger 'ledger-2)) #t)
             (ledger-1 (ledger-peer! ledger-3 blah) (lambda (r) (eq? (car r) 'error)))
             (ledger-1 (ledger-peer! ledger-3 #f) #t)
             (ledger-2 *step*)
             (ledger-2 (ledger-set! (*state* a b c) 42) #t)
             (ledger-2 (ledger-set! (*state* a b c*) 43) #t)
             (ledger-2 (ledger-copy! (*state* a b c*) (*state* a b c**)) #t)
             (ledger-2 *step*)
             (ledger-2 (ledger-get (*state* a b c*)) '(object 43))
             (ledger-2 (ledger-get (*state* a b c**)) '(object 43))
             (ledger-1 *step*)
             (ledger-2 *step*)
             (ledger-2 (ledger-pin! (*state* a b c) 3) #t)
             (ledger-1 *step*)
             (ledger-2 *step*)
             (ledger-1 *step*)
             (ledger-2 *step*)
             (ledger-2 (ledger-set! (*state* a b c) 44) #t)
             (ledger-2 *step*)
             (ledger-1 *step*)
             (ledger-1 *step*)
             (ledger-2 *step*)
             (ledger-1 (ledger-index))
             (ledger-1 (ledger-get (*peers* ledger-2 *state* a b)) '(directory (c c** c*) #t))
             (ledger-1 (ledger-get (*peers* ledger-2 *state* a b c) 6) '(object 44))
             (ledger-1 (ledger-get (*peers* ledger-2 *state* a b c)) '(object 44))
             (ledger-2 (ledger-peer! ledger-3 ,(make-messenger 'ledger-3)) #t)
             (ledger-3 (ledger-peer! ledger-4 ,(make-messenger 'ledger-4)) #t)
             (ledger-3 (ledger-peer! ledger-5 ,(make-messenger 'ledger-5)) #t)
             (ledger-3 (ledger-set! (*state* d e f) 64) #t)
             (ledger-4 (ledger-set! (*state* g h i) "hello") #t)
             (ledger-5 (ledger-set! (*state* g h i) "world") #t)
             (ledger-1 *step*)
             (ledger-2 *step*)
             (ledger-3 *step*)
             (ledger-4 *step*)
             (ledger-5 *step*)
             (ledger-1 *step*)
             (ledger-2 *step*)
             (ledger-3 *step*)
             (ledger-4 *step*)
             (ledger-5 *step*)
             (ledger-2 (ledger-get (*peers* ledger-3 *state* d e f)) `(object 64))
             (ledger-1 *step*)
             (ledger-2 *step*)
             (ledger-3 *step*)
             (ledger-4 *step*)
             (ledger-5 *step*)
             (ledger-1 *step*)
             (ledger-2 *step*)
             (ledger-3 *step*)
             (ledger-4 *step*)
             (ledger-5 *step*)
             (ledger-1 (ledger-get (*peers* ledger-2 *peers* ledger-3 *state* d e f)) '(object 64))
             (ledger-1 (ledger-get (*peers* ledger-2 *peers* ledger-3 *peers* ledger-4 *state* g h i)) '(object "hello"))
             (ledger-1 (ledger-get (*peers* ledger-2 *peers* ledger-3 *peers* ledger-5 *state* g h i)) '(object "world"))
             (ledger-1 *step*)
             (ledger-2 *step*)
             (ledger-1 *step*)
             (ledger-2 *step*)
             (ledger-1 (ledger-index))
             (ledger-1 (ledger-get (*state* do pin) 2) '(directory (this that) #t))
             (ledger-1 (ledger-get (*state* do pin this) 2) '(object yes))
             (ledger-1 (ledger-get (*state* do pin that) 2) '(object yes))
             (ledger-1 (ledger-get (*state* do not pin) 2) '(nothing ()))
             (ledger-1 (ledger-unpin! (*state* do pin that) 2) #t)
             (ledger-1 (ledger-get (*state* do pin) 2))
             (ledger-1 (ledger-get (*state* do pin this) 2) '(object yes))
             (ledger-1 (ledger-get (*state* do pin that) 2) '(nothing ()))
             (ledger-1 *step*)
             (ledger-2 *step*)
             (ledger-1 *step*)
             (ledger-2 *step*)
             (ledger-1 (ledger-get (*peers* ledger-2 *state* a b c) 4) '(object 42))))))))
