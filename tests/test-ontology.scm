(lambda (run-test make-messenger record-src control-src ledger-src ontology-src)
  (let* ((pass (lambda (x) (append "pass-" (symbol->string x))))
         (init (lambda (x) `(,x (,record-src
                                 ,(pass x)
                                 ,control-src
                                 (,ledger-src ,(pass x) #t 10)
                                 ,ontology-src)
                                "Installed record interface")))
         (form (lambda (x) `(,(car x)
                             ,(if (eq? (cadr x) '*step*) `(*step* ,(pass (car x)))
                                  `(*local* ,(pass (car x)) ,(cadr x)))
                             ,@(cddr x))))
         (count (lambda (x) `(lambda (x) (= (length (cadr x)) ,x)))))
    (run-test
     (append
      (map init '(journal-1 journal-2 journal-3))
      (map form
           `((journal-1 *step*)
             (journal-1 (ontology-insert! (ref (s1)) (ref (p1)) (ref (o1))) #t)
             (journal-1 (ontology-insert! (ref (s1)) (ref (p1)) (ref (o5))) #t)
             (journal-1 *step*)
             (journal-1 (ontology-insert! (ref (s1)) (ref (p1)) (ref (o3))) #t)
             (journal-1 *step*)
             (journal-1 (ontology-insert! (ref (s1)) (ref (p1)) (ref (o4))) #t)
             (journal-1 *step*)
             (journal-1 (ontology-select (var) (var) (var)) ,(count 4))
             (journal-1 (ontology-insert! (ref (s1)) (ref (p1)) (ref (o3))) #t)
             (journal-1 (ontology-insert! (ref (s1)) (ref (p1)) (var)) #t)
             (journal-1 (ontology-insert! (ref (s1)) (ref (p2)) (exp (+ 2 2))) #t)
             (journal-1 (ontology-remove! (ref (s1)) (ref (p1)) (ref (o1))) #t)
             (journal-1 *step*)
             (journal-1 (ontology-select (ref (s1)) (ref (p1)) (var)) ,(count 4))
             (journal-1 (ontology-select (ref (s1)) (ref (p2)) (var)) ,(count 1))
             (journal-1 (ontology-remove! (ref (s1)) (ref (p2)) (exp (+ 2 2))) #t)
             (journal-1 *step*)
             (journal-1 (ontology-select (ref (s1)) (ref (p2)) (var)) ,(count 0))
             (journal-1 (ontology-select (ref (s1)) (ref (p2)) (var) #f -2) ,(count 1))
             (journal-1 (ontology-insert! (ref (s1)) (ref (p2)) (exp (+ 4 4)) (*state* my-ontology)) #t)
             (journal-1 (ontology-insert! (ref (s1)) (ref (p2)) (exp (+ 8 8)) (*state* my-ontology)) #t)
             (journal-1 *step*)
             (journal-1 (ontology-select (var) (var) (var) (*state* my-ontology)) ,(count 2))
             (journal-1 (ontology-select (var) (var) (exp "none") (*state* my-ontology)) ,(count 0))
             (journal-1 *step*)
             (journal-2 *step*)
             (journal-2 *step*)
             (journal-3 *step*)
             (journal-2 (ledger-peer! journal-1 ,(make-messenger 'journal-1)) #t)
             (journal-3 (ledger-peer! journal-2 ,(make-messenger 'journal-2)) #t)
             (journal-1 *step*)
             (journal-2 *step*)
             (journal-3 *step*)
             (journal-1 *step*)
             (journal-2 *step*)
             (journal-3 *step*)
             (journal-2 (ontology-select (var) (var) (var) (*peers* journal-1 *state* *ontology*)) ,(count 4))
             (journal-3 (ontology-select (var) (var) (var) (*peers* journal-2 *peers* journal-1 *state* *ontology*)) ,(count 4))))))))
