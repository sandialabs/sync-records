(lambda (run-test make-messenger control-src standard-src)
  (let* ((pass (lambda (x) (append "pass-" (symbol->string x))))
         (init (lambda (x) `(,x (,control-src ,(pass x)) "Installed control module")))
         (install (lambda (x)
                    `(,(car x) (*call* ,(pass (car x)) ,(cadr x)) ,(caddr x))))
         (query (lambda (x)
                  `(,(car x)
                    (*call* ,(pass (car x))
                            (lambda (root)
                              (let* ((std-node (cadr ((root 'get) '(control library standard))))
                                     (std ((eval (byte-vector->expression (sync-car std-node))) std-node)))
                                ,(cadr x))))
                    ,@(cddr x)))))
    (run-test
     (append
      (map init '(journal))
      (map install `((journal ,standard-src "Installed standard library")))
      (map query
           `((journal ((root 'set!) '(control test source)
                       `(object ,((std 'dump) std) (lambda (x) (eq? (car x) 'sync-node)))) #t)
             (journal (let* ((serialized ((std 'serialize) (cadr ((root 'get) '(control test source)))))
                             (deserialized ((std 'deserialize) serialized))
                             (result ((root 'set!) '(control test target) `(object ,deserialized))))
                        `(,serialized ,deserialized #t))
                      (lambda (x) (and (pair? (car x)) (eq? (caadr x) 'sync-node) (caddr x))))
             (journal ((root 'equal?) '(control test source) '(control test target)) #t)
             (journal ((root 'set!) '(control test stateful)
                       `(object ,(((std 'make) '(define-class (foo)
                                                  (define (add self x) (+ x 1))
                                                  (define* (fact self x (result 1))
                                                    (if (< x 1) result
                                                        ((self 'fact) (- x 1) (* result x))))
                                                  (define (state-get self)
                                                    (byte-vector->expression (sync-cdr (self))))
                                                  (define (state-set! self x)
                                                    (set! (self) (sync-cons (sync-car (self))
                                                                          (expression->byte-vector x))))))))) #t)
             (journal (let ((object ((std 'load) (cadr ((root 'get) '(control test stateful))))))
                        ((object 'add) 1)) 2)
             (journal (let ((object ((std 'load) (cadr ((root 'get) '(control test stateful))))))
                        ((object 'fact) 4)) (* 4 3 2 1))
             (journal (let ((object ((std 'load) (cadr ((root 'get) '(control test stateful))))))
                        ((object 'state-set!) "hello, world!")
                        ((root 'set!) '(control test stateful) `(object ,((std 'dump) object)))) #t)
             (journal (let ((object ((std 'load) (cadr ((root 'get) '(control test stateful))))))
                        ((object 'state-get))) "hello, world!")
             ))))))
